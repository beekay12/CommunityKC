<?php
/* include file imports */
require_once('custom.user.inc');

/**
 * Implements hook_menu
 * @return array
 */
function custom_menu() {
	$items = array();
  // Misc
  // one-time data run
  /*
  $items['run_user_map'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Run User Map',
    'page callback' => '_custom_page_map_users',
    'description' => 'One time runs user maps to projects.',
    'access callback' => TRUE,
    'file' => 'custom.user.inc',
    'menu_name' => 'devel',
  ); */
  return $items;
}
/* webform intercept - mail to person on project contact
   volunteer form
   this is confusing but we drill down from the project url to load the
   project node and find the contact person.
*/
function custom_mail_alter(&$message) {
	// check for webform
	if ($message['id'] == 'webform_submission') {
		// check for node id 999 which is the volunteer form.
		if ($message['params']) {
			// search message body for url
			$msg_body = $message['params']['message'];
			$matches = array();
			// preg_match
			$has_match = preg_match("/This person has expressed interest in volunteering for\s*.*?:\s*(http.*?)\s/", $msg_body, $matches);
			if ($has_match && count($matches) == 2) {
				$url = $matches[1];
				$node_id = _custom_find_node_id_from_project_url($url);
				if ($node_id) {
					$project = node_load($node_id);
					$contact_email = $project->field_lead_contact_email[LANGUAGE_NONE][0]['value'];
					$contact_name = $project->field_lead_contact_person[LANGUAGE_NONE][0]['value'];
					$message['to'] .= ',' . $contact_email;
				}
			}
		}
	}
}
/**
 * Find node id from a given url and path
 * volunteer form
 */
function _custom_find_node_id_from_project_url($url) {
	global $base_url;
	$parsed = parse_url($url);
	if ($parsed && !empty($parsed['path'])) {
		// expecting path to start with a /
		$path = strpos($parsed['path'],'/') === 0 ? substr($parsed['path'],1) : $parsed['path'];
		$node_path = drupal_get_normal_path($path);
		$nid = str_replace('node/', '', $node_path);
		return $nid;
	}
	return false;
}

/* Drupal hooks for this module
* notifications
 */

function custom_node_presave($node) {
	switch ($node->type) {
		case 'project':
			# run the project node presave
			_custom_project_node_presave($node);
			break;			
	}
}

/* Project node type functions 
* notifications
*/
function _custom_project_node_presave($node) {
	if (true || empty($node->nid)) {
		# only run if this is a new node and has a neighborhood set
		$neighborhoods = array();
		if (!empty($node->field_neighborhood)) {
			foreach($node->field_neighborhood[LANGUAGE_NONE] as $delta=>$fld) {
				$neighborhoods[] = $fld['tid'];
			}
		}
		$project_types = array();
		if (!empty($node->field_project_type)) { 
			foreach($node->field_project_type[LANGUAGE_NONE] as $delta=>$fld) {
				$project_types[] = $fld['tid'];			
			}
		}
		// query
		// users with field_project_notify_prefs
	// test only
		# $notifications = _custom_notification_query($neighborhoods, $project_types, $node->uid);
		// user is not $node->uid
	}
}

/**
 * @param array $neighborhoods array of tid ints for neighborhoods based on saved project
 * @param $project_types array of tid ints for project types based on save project
 */
function _custom_notification_query($neighborhoods, $project_types, $uid) {

	$neighborhood_vid = 1;
	$project_type_vid = 2;
	$query_sql = "
select 
	-- user
	u.uid, u.name, u.mail, prefs.field_project_notification_prefs_value as notification_prefs,
    -- project node
    n.nid, n.title, 
    -- neighborhood
    ti_nh.tid as tid_nh, ttd_nh.name as neighborhood, 
    -- project type
    ti_pt.tid as tid_pt, ttd_pt.name as project_type
-- 	*
from 
	{node} n
    inner join
		{users} u
			on u.uid = n.uid
-- user notification prefs
	inner join
		{field_data_field_project_notification_prefs} prefs
			on prefs.bundle = 'user' and prefs.entity_id = u.uid
-- neighborhood
    inner join
		{taxonomy_index} ti_nh
			on ti_nh.nid = n.nid
	inner join 
		{taxonomy_term_data} ttd_nh
			on ti_nh.tid = ttd_nh.tid and ttd_nh.vid = :nh_vid
-- project type
	inner join
		{taxonomy_index} ti_pt
			on ti_pt.nid = n.nid
	inner join 
		{taxonomy_term_data} ttd_pt
			on ti_pt.tid = ttd_pt.tid and ttd_pt.vid = :pt_vid
where
	prefs.field_project_notification_prefs_value > 0 
and
	u.uid != :uid
and
	n.type = 'project'
and 
    n.status = 1
and 
(	ti_nh.tid in(:nh_tids)
or
	ti_pt.tid in(:pt_tids))";
	$db = db_query($query_sql, array(':nh_vid' => $neighborhood_vid, ':pt_vid' => $project_type_vid, ':uid' => $uid,
		':nh_tids'=>$neighborhoods, ':pt_tids'=>$project_types));
	$results = array();
	foreach($db as $record) {

		$results[$record->uid]['neighborhoods'][$record->tid_nh] = $record->notification_prefs;
		$results[$record->uid]['project_types'][$record->tid_pt] = $record->notification_prefs;
	}
	var_dump($results);
	return $results;
}

/* end project node type functions */