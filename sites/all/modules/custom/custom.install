<?php

function custom_schema() {
	$schema = array();

	$schema['custom_notify_email_queue'] = array(
		'description' => 'Holds lists of notification emails to be sent. Records removed 30 days after sent triggered',
		'fields' => array(
			'queue_id' => array(
				'description' => 'identity field for queue records.',
				'type' => 'serial',
				'size' => 'normal',
				'unsigned' => TRUE,
				'not null' => TRUE,
			),
			'uid' => array(
				'description' => 'user uid mail is going to go to',
				'type' => 'int',
				'size' => 'normal',
				'unsigned' => TRUE,
				'not null' => TRUE,
			),
			'mail_type' => array(
				'description' => 'string name identifying type of email to go out',
				'type' => 'varchar',
				'length' => 64,
				'not null' => FALSE
			),
			'tokens' => array(
				'description' => 'serialized array of tokens variables for the message',
				'type' => 'blob',
				'not null' => FALSE,
			),
			'created' => array(
				'description' => 'timestamp when the record was enqueued',
				'type' => 'int',
				'size' => 'normal',
				'unsigned' => TRUE,
				'not null' => TRUE,
			),
			'sent' => array(
				'description' => 'timestamp when mail was sent',
				'type' => 'int',
				'size' => 'normal',
				'unsigned' => TRUE,
				'not null' => FALSE,
			),
		),
		'primary key' => array('custom_notify_email_queue'),
		'indexes' => array(
			'custom_notify_email_queue_sent' => array('sent'),
		),
	);
	/*
	$schema['custom_flat_user_project_types_and_neighborhoods'] = array(
		
	); */
 	return array();//  $schema;
}

/**
 * Implements hook_enable()
 * @see: http://drupal.stackexchange.com/questions/8253/how-to-add-extra-fields-to-user-profile
 * when creating fields you can use field_read_field() and field_read_instance() of an 
 * interactively created field in order to see how the settings should look
 * on a created field.
 */
function custom_install() {
	# Check if our field is not already created.
	if (!field_info_field('field_project_notification_prefs')) {
		$field = array(
			'field_name' => 'field_project_notification_prefs',
			'type' => 'number_integer',
			'active' => TRUE,
			'locked' => TRUE,
			'module' => 'number',
			'settings' => array( 
			/* - not using on number field but here are names
				'allowed_values' => array(
					'neighborhood' => 'neighborhood',
					'project_type' => 'project_type',
					'match_both' => 'match_both' */
			),
			'cardinality' => 1,
			);
			field_create_field($field);
	}

	# Create the instance on the bundle.
	$instance = array(
		'field_name' => 'field_project_notification_prefs',
		'entity_type' => 'user',
		'label' => 'Project Notification Prefs',
		'bundle' => 'user',
		'required' => FALSE,
		'settings' => array(
			'user_register_form' => 0,
			'min' => 0,
			'max' => 7,			
		),
		'widget' => array(
			'type' => 'number',
			'module' => 'number',
			'active' => 0,			
		),
		'display' => array(
			'default' => array(
				'label' => 'hidden',
				'type' => 'hidden',
			),
		),
		'description' => 'Stores checkbox prefs in bit form - 0 is no notification, 1 neighborhood, 2 is same type, 4 is same type and neighborhood. Checked boxes are populated from sum of choices - each corresponds to a bit in a binary number - 001 011 111 010 etc',
		'default_value' => array(0 => array( 'value' => '0')),
	);
	field_create_instance($instance);
}


